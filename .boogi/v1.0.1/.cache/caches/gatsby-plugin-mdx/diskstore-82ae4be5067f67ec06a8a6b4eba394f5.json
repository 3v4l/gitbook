{
  "expireTime": 9007200869051276000,
  "key": "gatsby-plugin-mdx-entire-payload-9e177f52c2bcb2b4309ae66347e53c29-",
  "val": {
    "mdast": {
      "type": "root",
      "children": [
        {
          "type": "jsx",
          "value": "<!-- order:280 -->",
          "position": {
            "start": { "line": 1, "column": 1, "offset": 0 },
            "end": { "line": 1, "column": 19, "offset": 18 },
            "indent": []
          }
        },
        {
          "type": "heading",
          "depth": 3,
          "children": [
            {
              "type": "text",
              "value": "35. eth_newPendingTransactionFilter",
              "position": {
                "start": { "line": 3, "column": 5, "offset": 24 },
                "end": { "line": 3, "column": 40, "offset": 59 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 3, "column": 1, "offset": 20 },
            "end": { "line": 3, "column": 40, "offset": 59 },
            "indent": []
          }
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Creates a filter to retrieve new pending transactions hashes. To poll for new pending transactions, use\n",
              "position": {
                "start": { "line": 5, "column": 1, "offset": 61 },
                "end": { "line": 6, "column": 1, "offset": 165 },
                "indent": [1]
              }
            },
            {
              "type": "link",
              "title": null,
              "url": "#eth_getfilterchanges",
              "children": [
                {
                  "type": "inlineCode",
                  "value": "eth_getFilterChanges",
                  "position": {
                    "start": { "line": 6, "column": 2, "offset": 166 },
                    "end": { "line": 6, "column": 24, "offset": 188 },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": { "line": 6, "column": 1, "offset": 165 },
                "end": { "line": 6, "column": 48, "offset": 212 },
                "indent": []
              }
            },
            {
              "type": "text",
              "value": ".",
              "position": {
                "start": { "line": 6, "column": 48, "offset": 212 },
                "end": { "line": 6, "column": 49, "offset": 213 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 5, "column": 1, "offset": 61 },
            "end": { "line": 6, "column": 49, "offset": 213 },
            "indent": [1]
          }
        },
        {
          "type": "export",
          "value": "export const _frontmatter = {}",
          "position": {
            "start": { "line": 9, "column": 1, "offset": 216 },
            "end": { "line": 9, "column": 31, "offset": 246 },
            "indent": []
          }
        }
      ],
      "position": {
        "start": { "line": 1, "column": 1, "offset": 0 },
        "end": { "line": 9, "column": 31, "offset": 246 }
      }
    },
    "scopeImports": ["import * as React from 'react'"],
    "scopeIdentifiers": ["React"],
    "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"35. eth_newPendingTransactionFilter\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Creates a filter to retrieve new pending transactions hashes. To poll for new pending transactions, use\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#eth_getfilterchanges\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"eth_getFilterChanges\")), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;",
    "rawMDXOutput": "/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    {\n      /* order:280 */\n    }\n    <section><h3 parentName=\"section\">{`35. eth_newPendingTransactionFilter`}</h3><p parentName=\"section\">{`Creates a filter to retrieve new pending transactions hashes. To poll for new pending transactions, use\n`}<a parentName=\"p\" {...{\n          \"href\": \"#eth_getfilterchanges\"\n        }}><inlineCode parentName=\"a\">{`eth_getFilterChanges`}</inlineCode></a>{`.`}</p></section>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"
  }
}
