{
  "expireTime": 9007200869051275000,
  "key": "gatsby-plugin-mdx-entire-payload-1da172fd25bb440ccbfebf96b3b6973d-",
  "val": {
    "mdast": {
      "type": "root",
      "children": [
        {
          "type": "heading",
          "depth": 1,
          "children": [
            {
              "type": "text",
              "value": "net_version",
              "position": {
                "start": { "line": 1, "column": 3, "offset": 2 },
                "end": { "line": 1, "column": 14, "offset": 13 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 1, "column": 1, "offset": 0 },
            "end": { "line": 1, "column": 14, "offset": 13 },
            "indent": []
          }
        },
        {
          "type": "heading",
          "depth": 2,
          "children": [
            {
              "type": "text",
              "value": "/v1/jsonrpc/:network/net_version",
              "position": {
                "start": { "line": 3, "column": 4, "offset": 18 },
                "end": { "line": 3, "column": 36, "offset": 50 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 3, "column": 1, "offset": 15 },
            "end": { "line": 3, "column": 36, "offset": 50 },
            "indent": []
          }
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Returns the current network id.",
              "position": {
                "start": { "line": 5, "column": 1, "offset": 52 },
                "end": { "line": 5, "column": 32, "offset": 83 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 5, "column": 1, "offset": 52 },
            "end": { "line": 5, "column": 32, "offset": 83 },
            "indent": []
          }
        },
        {
          "type": "heading",
          "depth": 3,
          "children": [
            {
              "type": "text",
              "value": "REQUEST",
              "position": {
                "start": { "line": 7, "column": 5, "offset": 89 },
                "end": { "line": 7, "column": 12, "offset": 96 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 7, "column": 1, "offset": 85 },
            "end": { "line": 7, "column": 12, "offset": 96 },
            "indent": []
          }
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "inlineCode",
              "value": "GET https://api.backbonecabal.xyz/v1/jsonrpc/:network/net_version",
              "position": {
                "start": { "line": 9, "column": 1, "offset": 98 },
                "end": { "line": 9, "column": 68, "offset": 165 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 9, "column": 1, "offset": 98 },
            "end": { "line": 9, "column": 68, "offset": 165 },
            "indent": []
          }
        },
        {
          "type": "heading",
          "depth": 4,
          "children": [
            {
              "type": "text",
              "value": "HEADERS",
              "position": {
                "start": { "line": 11, "column": 6, "offset": 172 },
                "end": { "line": 11, "column": 13, "offset": 179 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 11, "column": 1, "offset": 167 },
            "end": { "line": 11, "column": 13, "offset": 179 },
            "indent": []
          }
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "inlineCode",
              "value": "Content-Type: application/json",
              "position": {
                "start": { "line": 13, "column": 1, "offset": 181 },
                "end": { "line": 13, "column": 33, "offset": 213 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 13, "column": 1, "offset": 181 },
            "end": { "line": 13, "column": 33, "offset": 213 },
            "indent": []
          }
        },
        {
          "type": "heading",
          "depth": 4,
          "children": [
            {
              "type": "text",
              "value": "EXAMPLE",
              "position": {
                "start": { "line": 15, "column": 6, "offset": 220 },
                "end": { "line": 15, "column": 13, "offset": 227 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 15, "column": 1, "offset": 215 },
            "end": { "line": 15, "column": 13, "offset": 227 },
            "indent": []
          }
        },
        {
          "type": "code",
          "lang": "bash",
          "meta": null,
          "value": "// HTTP GET\ncurl -G https://api.backbonecabal.xyz/v1/jsonrpc/mainnet/net_version\n\n// HTTP POST\ncurl https://mainnet.backbonecabal.xyz/ \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\": [],\"id\":1}'\n\n// WEBSOCKETS\n>wscat -c wss://mainnet.backbonecabal.xyz/ws\n>{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\": [],\"id\":1}",
          "position": {
            "start": { "line": 17, "column": 1, "offset": 229 },
            "end": { "line": 30, "column": 4, "offset": 625 },
            "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
          }
        },
        {
          "type": "heading",
          "depth": 3,
          "children": [
            {
              "type": "text",
              "value": "RESPONSE",
              "position": {
                "start": { "line": 32, "column": 5, "offset": 631 },
                "end": { "line": 32, "column": 13, "offset": 639 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 32, "column": 1, "offset": 627 },
            "end": { "line": 32, "column": 13, "offset": 639 },
            "indent": []
          }
        },
        {
          "type": "heading",
          "depth": 4,
          "children": [
            {
              "type": "text",
              "value": "RESULT FIELDS",
              "position": {
                "start": { "line": 34, "column": 6, "offset": 646 },
                "end": { "line": 34, "column": 19, "offset": 659 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 34, "column": 1, "offset": 641 },
            "end": { "line": 34, "column": 19, "offset": 659 },
            "indent": []
          }
        },
        {
          "type": "list",
          "ordered": false,
          "start": null,
          "spread": false,
          "children": [
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "NETWORK ID",
                      "position": {
                        "start": { "line": 36, "column": 5, "offset": 665 },
                        "end": { "line": 36, "column": 17, "offset": 677 },
                        "indent": []
                      }
                    },
                    {
                      "type": "text",
                      "value": " - a string representing the current network id.",
                      "position": {
                        "start": { "line": 36, "column": 17, "offset": 677 },
                        "end": { "line": 36, "column": 65, "offset": 725 },
                        "indent": []
                      }
                    }
                  ],
                  "position": {
                    "start": { "line": 36, "column": 5, "offset": 665 },
                    "end": { "line": 36, "column": 65, "offset": 725 },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": { "line": 36, "column": 1, "offset": 661 },
                "end": { "line": 36, "column": 65, "offset": 725 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 36, "column": 1, "offset": 661 },
            "end": { "line": 36, "column": 65, "offset": 725 },
            "indent": []
          }
        },
        {
          "type": "heading",
          "depth": 4,
          "children": [
            {
              "type": "text",
              "value": "BODY",
              "position": {
                "start": { "line": 38, "column": 6, "offset": 732 },
                "end": { "line": 38, "column": 10, "offset": 736 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 38, "column": 1, "offset": 727 },
            "end": { "line": 38, "column": 10, "offset": 736 },
            "indent": []
          }
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "{\n    jsonrpc: \"2.0\",\n    id: 1,\n    result: \"1\"\n}",
          "position": {
            "start": { "line": 40, "column": 1, "offset": 738 },
            "end": { "line": 46, "column": 4, "offset": 798 },
            "indent": [1, 1, 1, 1, 1, 1]
          }
        },
        {
          "type": "export",
          "value": "export const _frontmatter = {}",
          "position": {
            "start": { "line": 49, "column": 1, "offset": 801 },
            "end": { "line": 49, "column": 31, "offset": 831 },
            "indent": []
          }
        }
      ],
      "position": {
        "start": { "line": 1, "column": 1, "offset": 0 },
        "end": { "line": 49, "column": 31, "offset": 831 }
      }
    },
    "scopeImports": ["import * as React from 'react'"],
    "scopeIdentifiers": ["React"],
    "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"net_version\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"/v1/jsonrpc/:network/net_version\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Returns the current network id.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"REQUEST\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET https://api.backbonecabal.xyz/v1/jsonrpc/:network/net_version\"))), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"HEADERS\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Content-Type: application/json\"))), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"EXAMPLE\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"// HTTP GET\\ncurl -G https://api.backbonecabal.xyz/v1/jsonrpc/mainnet/net_version\\n\\n// HTTP POST\\ncurl https://mainnet.backbonecabal.xyz/ \\\\\\n    -X POST \\\\\\n    -H \\\"Content-Type: application/json\\\" \\\\\\n    -d '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"net_version\\\",\\\"params\\\": [],\\\"id\\\":1}'\\n\\n// WEBSOCKETS\\n>wscat -c wss://mainnet.backbonecabal.xyz/ws\\n>{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"net_version\\\",\\\"params\\\": [],\\\"id\\\":1}\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"RESPONSE\")), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"RESULT FIELDS\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NETWORK ID\"), \" - a string representing the current network id.\"))), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"BODY\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n    jsonrpc: \\\"2.0\\\",\\n    id: 1,\\n    result: \\\"1\\\"\\n}\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;",
    "rawMDXOutput": "/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <section><h1 parentName=\"section\">{`net_version`}</h1></section>\n    <section><h2 parentName=\"section\">{`/v1/jsonrpc/:network/net_version`}</h2><p parentName=\"section\">{`Returns the current network id.`}</p></section>\n    <section><h3 parentName=\"section\">{`REQUEST`}</h3><p parentName=\"section\"><inlineCode parentName=\"p\">{`GET https://api.backbonecabal.xyz/v1/jsonrpc/:network/net_version`}</inlineCode></p></section>\n    <section><h4 parentName=\"section\">{`HEADERS`}</h4><p parentName=\"section\"><inlineCode parentName=\"p\">{`Content-Type: application/json`}</inlineCode></p></section>\n    <section><h4 parentName=\"section\">{`EXAMPLE`}</h4><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`// HTTP GET\ncurl -G https://api.backbonecabal.xyz/v1/jsonrpc/mainnet/net_version\n\n// HTTP POST\ncurl https://mainnet.backbonecabal.xyz/ \\\\\n    -X POST \\\\\n    -H \"Content-Type: application/json\" \\\\\n    -d '{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\": [],\"id\":1}'\n\n// WEBSOCKETS\n>wscat -c wss://mainnet.backbonecabal.xyz/ws\n>{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\": [],\"id\":1}\n`}</code></pre></section>\n    <section><h3 parentName=\"section\">{`RESPONSE`}</h3></section>\n    <section><h4 parentName=\"section\">{`RESULT FIELDS`}</h4><ul parentName=\"section\">\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`NETWORK ID`}</inlineCode>{` - a string representing the current network id.`}</li>\n      </ul></section>\n    <section><h4 parentName=\"section\">{`BODY`}</h4><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`{\n    jsonrpc: \"2.0\",\n    id: 1,\n    result: \"1\"\n}\n`}</code></pre></section>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"
  }
}
