{
  "expireTime": 9007200869051275000,
  "key": "gatsby-plugin-mdx-entire-payload-3c7afb9545dd4da34e7a182b01901e9f-",
  "val": {
    "mdast": {
      "type": "root",
      "children": [
        {
          "type": "heading",
          "depth": 1,
          "children": [
            {
              "type": "text",
              "value": "eth_syncing",
              "position": {
                "start": { "line": 1, "column": 3, "offset": 2 },
                "end": { "line": 1, "column": 14, "offset": 13 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 1, "column": 1, "offset": 0 },
            "end": { "line": 1, "column": 14, "offset": 13 },
            "indent": []
          }
        },
        {
          "type": "heading",
          "depth": 2,
          "children": [
            {
              "type": "text",
              "value": "/v1/jsonrpc/:network/eth_syncing",
              "position": {
                "start": { "line": 3, "column": 4, "offset": 18 },
                "end": { "line": 3, "column": 36, "offset": 50 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 3, "column": 1, "offset": 15 },
            "end": { "line": 3, "column": 36, "offset": 50 },
            "indent": []
          }
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Returns an object with data about the sync status or false.",
              "position": {
                "start": { "line": 5, "column": 1, "offset": 52 },
                "end": { "line": 5, "column": 60, "offset": 111 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 5, "column": 1, "offset": 52 },
            "end": { "line": 5, "column": 60, "offset": 111 },
            "indent": []
          }
        },
        {
          "type": "heading",
          "depth": 3,
          "children": [
            {
              "type": "text",
              "value": "REQUEST",
              "position": {
                "start": { "line": 7, "column": 5, "offset": 117 },
                "end": { "line": 7, "column": 12, "offset": 124 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 7, "column": 1, "offset": 113 },
            "end": { "line": 7, "column": 12, "offset": 124 },
            "indent": []
          }
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "inlineCode",
              "value": "GET https://api.backbonecabal.xyz/v1/jsonrpc/:network/eth_syncing",
              "position": {
                "start": { "line": 9, "column": 1, "offset": 126 },
                "end": { "line": 9, "column": 68, "offset": 193 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 9, "column": 1, "offset": 126 },
            "end": { "line": 9, "column": 68, "offset": 193 },
            "indent": []
          }
        },
        {
          "type": "heading",
          "depth": 4,
          "children": [
            {
              "type": "text",
              "value": "HEADERS",
              "position": {
                "start": { "line": 11, "column": 6, "offset": 200 },
                "end": { "line": 11, "column": 13, "offset": 207 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 11, "column": 1, "offset": 195 },
            "end": { "line": 11, "column": 13, "offset": 207 },
            "indent": []
          }
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "inlineCode",
              "value": "Content-Type: application/json",
              "position": {
                "start": { "line": 13, "column": 1, "offset": 209 },
                "end": { "line": 13, "column": 33, "offset": 241 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 13, "column": 1, "offset": 209 },
            "end": { "line": 13, "column": 33, "offset": 241 },
            "indent": []
          }
        },
        {
          "type": "heading",
          "depth": 4,
          "children": [
            {
              "type": "text",
              "value": "EXAMPLE",
              "position": {
                "start": { "line": 15, "column": 6, "offset": 248 },
                "end": { "line": 15, "column": 13, "offset": 255 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 15, "column": 1, "offset": 243 },
            "end": { "line": 15, "column": 13, "offset": 255 },
            "indent": []
          }
        },
        {
          "type": "code",
          "lang": "bash",
          "meta": null,
          "value": "// HTTP GET\ncurl -G https://api.backbonecabal.xyz/v1/jsonrpc/mainnet/eth_syncing\n\n// HTTP POST\ncurl https://mainnet.backbonecabal.xyz/ \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_syncing\",\"params\": [],\"id\":1}'\n\n// WEBSOCKETS\n>wscat -c wss://mainnet.backbonecabal.xyz/ws\n>{\"jsonrpc\":\"2.0\",\"method\":\"eth_syncing\",\"params\": [],\"id\":1}",
          "position": {
            "start": { "line": 17, "column": 1, "offset": 257 },
            "end": { "line": 30, "column": 4, "offset": 653 },
            "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
          }
        },
        {
          "type": "heading",
          "depth": 3,
          "children": [
            {
              "type": "text",
              "value": "RESPONSE",
              "position": {
                "start": { "line": 32, "column": 5, "offset": 659 },
                "end": { "line": 32, "column": 13, "offset": 667 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 32, "column": 1, "offset": 655 },
            "end": { "line": 32, "column": 13, "offset": 667 },
            "indent": []
          }
        },
        {
          "type": "heading",
          "depth": 4,
          "children": [
            {
              "type": "text",
              "value": "RESULT FIELDS",
              "position": {
                "start": { "line": 34, "column": 6, "offset": 674 },
                "end": { "line": 34, "column": 19, "offset": 687 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 34, "column": 1, "offset": 669 },
            "end": { "line": 34, "column": 19, "offset": 687 },
            "indent": []
          }
        },
        {
          "type": "list",
          "ordered": false,
          "start": null,
          "spread": false,
          "children": [
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "SYNC STATUS",
                      "position": {
                        "start": { "line": 36, "column": 5, "offset": 693 },
                        "end": { "line": 36, "column": 18, "offset": 706 },
                        "indent": []
                      }
                    },
                    {
                      "type": "text",
                      "value": " - a boolean as false ",
                      "position": {
                        "start": { "line": 36, "column": 18, "offset": 706 },
                        "end": { "line": 36, "column": 40, "offset": 728 },
                        "indent": []
                      }
                    },
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "only",
                          "position": {
                            "start": {
                              "line": 36,
                              "column": 42,
                              "offset": 730
                            },
                            "end": { "line": 36, "column": 46, "offset": 734 },
                            "indent": []
                          }
                        }
                      ],
                      "position": {
                        "start": { "line": 36, "column": 40, "offset": 728 },
                        "end": { "line": 36, "column": 48, "offset": 736 },
                        "indent": []
                      }
                    },
                    {
                      "type": "text",
                      "value": " when not syncing",
                      "position": {
                        "start": { "line": 36, "column": 48, "offset": 736 },
                        "end": { "line": 36, "column": 65, "offset": 753 },
                        "indent": []
                      }
                    }
                  ],
                  "position": {
                    "start": { "line": 36, "column": 5, "offset": 693 },
                    "end": { "line": 36, "column": 65, "offset": 753 },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": { "line": 36, "column": 1, "offset": 689 },
                "end": { "line": 36, "column": 65, "offset": 753 },
                "indent": []
              }
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "SYNC BLOCKS",
                      "position": {
                        "start": { "line": 37, "column": 5, "offset": 758 },
                        "end": { "line": 37, "column": 18, "offset": 771 },
                        "indent": []
                      }
                    },
                    {
                      "type": "text",
                      "value": " i. ",
                      "position": {
                        "start": { "line": 37, "column": 18, "offset": 771 },
                        "end": { "line": 37, "column": 22, "offset": 775 },
                        "indent": []
                      }
                    },
                    {
                      "type": "inlineCode",
                      "value": "startingBlock",
                      "position": {
                        "start": { "line": 37, "column": 22, "offset": 775 },
                        "end": { "line": 37, "column": 37, "offset": 790 },
                        "indent": []
                      }
                    },
                    {
                      "type": "text",
                      "value": " - a hexcode of the integer indicating the block at which the import started (will\nonly be reset, after the sync reached his head) ii. ",
                      "position": {
                        "start": { "line": 37, "column": 37, "offset": 790 },
                        "end": { "line": 38, "column": 57, "offset": 929 },
                        "indent": [5]
                      }
                    },
                    {
                      "type": "inlineCode",
                      "value": "currentBlock",
                      "position": {
                        "start": { "line": 38, "column": 57, "offset": 929 },
                        "end": { "line": 38, "column": 71, "offset": 943 },
                        "indent": []
                      }
                    },
                    {
                      "type": "text",
                      "value": " - a hexcode of the integer indicating the current\nblock, same as eth_blockNumber iii. ",
                      "position": {
                        "start": { "line": 38, "column": 71, "offset": 943 },
                        "end": { "line": 39, "column": 41, "offset": 1034 },
                        "indent": [5]
                      }
                    },
                    {
                      "type": "inlineCode",
                      "value": "highestBlock",
                      "position": {
                        "start": { "line": 39, "column": 41, "offset": 1034 },
                        "end": { "line": 39, "column": 55, "offset": 1048 },
                        "indent": []
                      }
                    },
                    {
                      "type": "text",
                      "value": " - a hexcode of the integer indicating the highest block",
                      "position": {
                        "start": { "line": 39, "column": 55, "offset": 1048 },
                        "end": { "line": 39, "column": 111, "offset": 1104 },
                        "indent": []
                      }
                    }
                  ],
                  "position": {
                    "start": { "line": 37, "column": 5, "offset": 758 },
                    "end": { "line": 39, "column": 111, "offset": 1104 },
                    "indent": [5, 5]
                  }
                }
              ],
              "position": {
                "start": { "line": 37, "column": 1, "offset": 754 },
                "end": { "line": 39, "column": 111, "offset": 1104 },
                "indent": [1, 1]
              }
            }
          ],
          "position": {
            "start": { "line": 36, "column": 1, "offset": 689 },
            "end": { "line": 39, "column": 111, "offset": 1104 },
            "indent": [1, 1, 1]
          }
        },
        {
          "type": "heading",
          "depth": 4,
          "children": [
            {
              "type": "text",
              "value": "BODY",
              "position": {
                "start": { "line": 41, "column": 6, "offset": 1111 },
                "end": { "line": 41, "column": 10, "offset": 1115 },
                "indent": []
              }
            }
          ],
          "position": {
            "start": { "line": 41, "column": 1, "offset": 1106 },
            "end": { "line": 41, "column": 10, "offset": 1115 },
            "indent": []
          }
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "\\\\ When not syncing\n{\n    jsonrpc: \"2.0\",\n    id: 1,\n    result: \"1\"\n}\n\n\\\\ When syncing\n{\n    \"id\":1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        startingBlock: '0x384',\n        currentBlock: '0x386',\n        highestBlock: '0x454'\n    }\n}",
          "position": {
            "start": { "line": 43, "column": 1, "offset": 1117 },
            "end": { "line": 61, "column": 4, "offset": 1367 },
            "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
          }
        },
        {
          "type": "export",
          "value": "export const _frontmatter = {}",
          "position": {
            "start": { "line": 64, "column": 1, "offset": 1370 },
            "end": { "line": 64, "column": 31, "offset": 1400 },
            "indent": []
          }
        }
      ],
      "position": {
        "start": { "line": 1, "column": 1, "offset": 0 },
        "end": { "line": 64, "column": 31, "offset": 1400 }
      }
    },
    "scopeImports": ["import * as React from 'react'"],
    "scopeIdentifiers": ["React"],
    "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"eth_syncing\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"/v1/jsonrpc/:network/eth_syncing\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Returns an object with data about the sync status or false.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"REQUEST\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET https://api.backbonecabal.xyz/v1/jsonrpc/:network/eth_syncing\"))), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"HEADERS\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Content-Type: application/json\"))), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"EXAMPLE\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"// HTTP GET\\ncurl -G https://api.backbonecabal.xyz/v1/jsonrpc/mainnet/eth_syncing\\n\\n// HTTP POST\\ncurl https://mainnet.backbonecabal.xyz/ \\\\\\n    -X POST \\\\\\n    -H \\\"Content-Type: application/json\\\" \\\\\\n    -d '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"eth_syncing\\\",\\\"params\\\": [],\\\"id\\\":1}'\\n\\n// WEBSOCKETS\\n>wscat -c wss://mainnet.backbonecabal.xyz/ws\\n>{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"eth_syncing\\\",\\\"params\\\": [],\\\"id\\\":1}\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"RESPONSE\")), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"RESULT FIELDS\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SYNC STATUS\"), \" - a boolean as false \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"only\"), \" when not syncing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SYNC BLOCKS\"), \" i. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"startingBlock\"), \" - a hexcode of the integer indicating the block at which the import started (will\\nonly be reset, after the sync reached his head) ii. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"currentBlock\"), \" - a hexcode of the integer indicating the current\\nblock, same as eth_blockNumber iii. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"highestBlock\"), \" - a hexcode of the integer indicating the highest block\"))), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"BODY\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\\\\\\\ When not syncing\\n{\\n    jsonrpc: \\\"2.0\\\",\\n    id: 1,\\n    result: \\\"1\\\"\\n}\\n\\n\\\\\\\\ When syncing\\n{\\n    \\\"id\\\":1,\\n    \\\"jsonrpc\\\": \\\"2.0\\\",\\n    \\\"result\\\": {\\n        startingBlock: '0x384',\\n        currentBlock: '0x386',\\n        highestBlock: '0x454'\\n    }\\n}\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;",
    "rawMDXOutput": "/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <section><h1 parentName=\"section\">{`eth_syncing`}</h1></section>\n    <section><h2 parentName=\"section\">{`/v1/jsonrpc/:network/eth_syncing`}</h2><p parentName=\"section\">{`Returns an object with data about the sync status or false.`}</p></section>\n    <section><h3 parentName=\"section\">{`REQUEST`}</h3><p parentName=\"section\"><inlineCode parentName=\"p\">{`GET https://api.backbonecabal.xyz/v1/jsonrpc/:network/eth_syncing`}</inlineCode></p></section>\n    <section><h4 parentName=\"section\">{`HEADERS`}</h4><p parentName=\"section\"><inlineCode parentName=\"p\">{`Content-Type: application/json`}</inlineCode></p></section>\n    <section><h4 parentName=\"section\">{`EXAMPLE`}</h4><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`// HTTP GET\ncurl -G https://api.backbonecabal.xyz/v1/jsonrpc/mainnet/eth_syncing\n\n// HTTP POST\ncurl https://mainnet.backbonecabal.xyz/ \\\\\n    -X POST \\\\\n    -H \"Content-Type: application/json\" \\\\\n    -d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_syncing\",\"params\": [],\"id\":1}'\n\n// WEBSOCKETS\n>wscat -c wss://mainnet.backbonecabal.xyz/ws\n>{\"jsonrpc\":\"2.0\",\"method\":\"eth_syncing\",\"params\": [],\"id\":1}\n`}</code></pre></section>\n    <section><h3 parentName=\"section\">{`RESPONSE`}</h3></section>\n    <section><h4 parentName=\"section\">{`RESULT FIELDS`}</h4><ul parentName=\"section\">\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SYNC STATUS`}</inlineCode>{` - a boolean as false `}<strong parentName=\"li\">{`only`}</strong>{` when not syncing`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SYNC BLOCKS`}</inlineCode>{` i. `}<inlineCode parentName=\"li\">{`startingBlock`}</inlineCode>{` - a hexcode of the integer indicating the block at which the import started (will\nonly be reset, after the sync reached his head) ii. `}<inlineCode parentName=\"li\">{`currentBlock`}</inlineCode>{` - a hexcode of the integer indicating the current\nblock, same as eth_blockNumber iii. `}<inlineCode parentName=\"li\">{`highestBlock`}</inlineCode>{` - a hexcode of the integer indicating the highest block`}</li>\n      </ul></section>\n    <section><h4 parentName=\"section\">{`BODY`}</h4><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`\\\\\\\\ When not syncing\n{\n    jsonrpc: \"2.0\",\n    id: 1,\n    result: \"1\"\n}\n\n\\\\\\\\ When syncing\n{\n    \"id\":1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        startingBlock: '0x384',\n        currentBlock: '0x386',\n        highestBlock: '0x454'\n    }\n}\n`}</code></pre></section>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"
  }
}
