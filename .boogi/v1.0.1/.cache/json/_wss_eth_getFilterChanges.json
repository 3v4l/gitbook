{
  "data": {
    "site": {
      "siteMetadata": {
        "title": "Manifold Finance Documentation Portal",
        "docsLocation": "https://github.com/manifoldfinance/gitdocs",
        "docsLocationType": "github",
        "editable": true
      }
    },
    "mdx": {
      "fields": {
        "id": "6a145a3d-b811-5f49-8f79-4d1199e50b32",
        "title": "Eth Get Filter Changes",
        "slug": "/wss/eth_getFilterChanges"
      },
      "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"eth_getFilterChanges\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Polling method for a filter, which returns an array of logs which occurred since last poll.\"), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"EXAMPLE\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \">wscat -c wss://mainnet.backbonecabal.xyz/ws\\n\\n>{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"eth_getFilterChanges\\\",\\\"params\\\":[\\\"0xfe704947a3cd3ca12541458a4321c869\\\"],\\\"id\\\":73}\\n\")))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"RESPONSE\")), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"RESULT FIELDS\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LOG OBJECT ARRAY\"), \" - Array of log objects, or an empty array if nothing has changed since last poll.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For filters created with eth_newBlockFilter the return are block hashes (32 Bytes), e.g. \", \"[\\\"0x3454645634534...\\\"]\", \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For filters created with eth_newPendingTransactionFilter the return are transaction hashes (32 Bytes), e.g.\\n\", \"[\\\"0x6345343454645...\\\"]\", \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For filters created with eth_newFilter logs are objects with following params:\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"removed\"), \": true when the log was removed, due to a chain reorganization. false if its a valid log.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"logIndex\"), \": integer of the log index position in the block. null when its pending log.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"transactionIndex\"), \": integer of the transactions index position log was created from. null when its pending log.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"transactionHash\"), \": 32 Bytes - hash of the transactions this log was created from. null when its pending log.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"blockHash\"), \": 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending log.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"blockNumber\"), \": the block number where this log was in. null when its pending. null when its pending log.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"address\"), \": 20 Bytes - address from which this log originated.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"data\"), \": DATA - contains the non-indexed arguments of the log.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"topics\"), \": Array of DATA - Array of 0 to 4 32 Bytes DATA of indexed log arguments. (In solidity: The first topic is\\nthe hash of the signature of the event (e.g. Deposit(address,bytes32,uint256)), except you declared the event with\\nthe anonymous specifier.)\"))), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"BODY\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    \\\"jsonrpc\\\": \\\"2.0\\\",\\n    \\\"id\\\": 73,\\n    \\\"result\\\": [{\\n        \\\"address\\\": \\\"0xb5a5f22694352c15b00323844ad545abb2b11028\\\",\\n        \\\"blockHash\\\": \\\"0x99e8663c7b6d8bba3c7627a17d774238eae3e793dee30008debb2699666657de\\\",\\n        \\\"blockNumber\\\": \\\"0x5d12ab\\\",\\n        \\\"data\\\": \\\"0x0000000000000000000000000000000000000000000000a247d7a2955b61d000\\\",\\n        \\\"logIndex\\\": \\\"0x0\\\",\\n        \\\"removed\\\": false,\\n        \\\"topics\\\": [\\\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\\\", \\\"0x000000000000000000000000bdc0afe57b8e9468aa95396da2ab2063e595f37e\\\", \\\"0x0000000000000000000000007503e090dc2b64a88f034fb45e247cbd82b8741e\\\"],\\n        \\\"transactionHash\\\": \\\"0xa74c2432c9cf7dbb875a385a2411fd8f13ca9ec12216864b1a1ead3c99de99cd\\\",\\n        \\\"transactionIndex\\\": \\\"0x3\\\"\\n    }, {\\n        \\\"address\\\": \\\"0xe38165c9f6deb144afc9c32c206b024817e1496d\\\",\\n        \\\"blockHash\\\": \\\"0x99e8663c7b6d8bba3c7627a17d774238eae3e793dee30008debb2699666657de\\\",\\n        \\\"blockNumber\\\": \\\"0x5d12ab\\\",\\n        \\\"data\\\": \\\"0x0000000000000000000000000000000000000000000000000000000025c6b720\\\",\\n        \\\"logIndex\\\": \\\"0x3\\\",\\n        \\\"removed\\\": false,\\n        \\\"topics\\\": [\\\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\\\", \\\"0x00000000000000000000000080e73e47173b2d00b531bf83bc39e710157125c3\\\", \\\"0x0000000000000000000000008f6cc93795969e5bbbf07c66dfee7d41ad24f1ef\\\"],\\n        \\\"transactionHash\\\": \\\"0x9e8f1cb1facb9a11a1cf947634053a0b2d557399f926b12127aa10497a2f0153\\\",\\n        \\\"transactionIndex\\\": \\\"0x5\\\"\\n    }\\n}\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;",
      "tableOfContents": {
        "items": [
          {
            "url": "#eth_getfilterchanges",
            "title": "eth_getFilterChanges",
            "items": [
              {
                "items": [
                  { "items": [{ "url": "#example", "title": "EXAMPLE" }] },
                  {
                    "url": "#response",
                    "title": "RESPONSE",
                    "items": [
                      { "url": "#result-fields", "title": "RESULT FIELDS" },
                      { "url": "#body", "title": "BODY" }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "timeToRead": 1,
      "parent": {
        "__typename": "File",
        "relativePath": "wss/eth_getFilterChanges.md",
        "fields": null
      },
      "frontmatter": {
        "metaTitle": null,
        "showMetadata": null,
        "editable": null,
        "showPreviousNext": null,
        "showToc": null
      }
    },
    "gitBranch": { "name": "master" },
    "gitCommit": {
      "hash": "baf0fa6f35d8f820cc62345ab6dad7a035ce28db",
      "date": "2021-02-26 01:42"
    }
  },
  "pageContext": { "id": "6a145a3d-b811-5f49-8f79-4d1199e50b32" }
}
